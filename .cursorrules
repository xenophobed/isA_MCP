# MCP Service Development Rules

## üéØ È°πÁõÆÊ¶ÇËø∞
ËøôÊòØ‰∏Ä‰∏™Âü∫‰∫éModel Context Protocol (MCP)ÁöÑÁªºÂêàÊúçÂä°Âπ≥Âè∞ÔºåÈõÜÊàê‰∫ÜËÆ∞ÂøÜÁÆ°ÁêÜ„ÄÅÁü•ËØÜÂ∫ì„ÄÅÂ∑•ÂÖ∑ÈõÜÂíåÁ¨¨‰∏âÊñπÂ∫îÁî®„ÄÇ

## üèóÔ∏è Êû∂ÊûÑÂéüÂàô

### Ê†∏ÂøÉËÆæËÆ°Ê®°Âºè
- **Êèí‰ª∂ÂåñÊû∂ÊûÑ**: ÊâÄÊúâÁªÑ‰ª∂ÈÉΩÂ∫îËØ•ÊòØÂèØÊèíÊãîÁöÑ
- **ÂºÇÊ≠•‰ºòÂÖà**: ÊâÄÊúâI/OÊìç‰ΩúÂøÖÈ°ª‰ΩøÁî®async/await
- **Á±ªÂûãÂÆâÂÖ®**: ‰∏•Ê†º‰ΩøÁî®Á±ªÂûãÊ≥®Ëß£ÂíåPydanticÊ®°Âûã
- **ÈîôËØØÂ§ÑÁêÜ**: Áªü‰∏ÄÁöÑÂºÇÂ∏∏Â§ÑÁêÜÂíåÈîôËØØÂìçÂ∫î
- **ÈÖçÁΩÆÈ©±Âä®**: ÈÄöËøáÈÖçÁΩÆÊñá‰ª∂ÁÆ°ÁêÜÊâÄÊúâËÆæÁΩÆ

### MCPÂçèËÆÆËßÑËåÉ
- ‰∏•Ê†ºÈÅµÂæ™MCPÂçèËÆÆËßÑËåÉ
- ÊâÄÊúâÂ∑•ÂÖ∑ÂøÖÈ°ªÊúâÊ∏ÖÊô∞ÁöÑËæìÂÖ•/ËæìÂá∫schema
- ËµÑÊ∫êÂøÖÈ°ªÊúâÈÄÇÂΩìÁöÑURIÂíåÁ±ªÂûã
- PromptÂøÖÈ°ªËøîÂõûÊ†áÂáÜÁöÑPromptÂØπË±°

## üìÅ ‰ª£Á†ÅÁªÑÁªáËßÑÂàô

### ÁõÆÂΩïÁªìÊûÑÁ∫¶ÂÆö
```
- apps/: Á¨¨‰∏âÊñπÂ∫îÁî®ÈõÜÊàê (shopify, notion, githubÁ≠â)
- clients/: MCPÂÆ¢Êà∑Á´ØÂÆûÁé∞
- core/: Ê†∏ÂøÉÈÖçÁΩÆÂíåÂ∑•ÂÖ∑Á±ª
- registry/: Ëá™Âä®ÂèëÁé∞ÂíåÊ≥®ÂÜåÁ≥ªÁªü
- resources/: Áü•ËØÜÂ∫ì„ÄÅÊ®°Êùø„ÄÅÊï∞ÊçÆÈõÜ
- servers/: MCPÊúçÂä°Âô®ÂÆûÁé∞
- tools/: Â∑•ÂÖ∑ÈõÜÂêà
- databases/: Êï∞ÊçÆËÆøÈóÆÂ±Ç
```

### ÂëΩÂêçÁ∫¶ÂÆö
- **Êñá‰ª∂Âêç**: snake_case (memory_server.py)
- **Á±ªÂêç**: PascalCase (MemoryServer)
- **ÂáΩÊï∞Âêç**: snake_case (get_memories)
- **Â∏∏Èáè**: UPPER_SNAKE_CASE (DEFAULT_PORT)
- **ÂèòÈáè**: snake_case (user_input)

### ÂØºÂÖ•ËßÑÂàô
```python
# 1. Ê†áÂáÜÂ∫ìÂØºÂÖ•
import asyncio
import json
from typing import Dict, List, Optional

# 2. Á¨¨‰∏âÊñπÂ∫ìÂØºÂÖ•
from pydantic import BaseModel
from mcp import types

# 3. Êú¨Âú∞ÂØºÂÖ•
from core.config import settings
from tools.base import ToolBase
```

## üîß ‰ª£Á†ÅÈ£éÊ†ºËßÑËåÉ

### Á±ªÂûãÊ≥®Ëß£
- ÊâÄÊúâÂáΩÊï∞ÂèÇÊï∞ÂíåËøîÂõûÂÄºÂøÖÈ°ªÊúâÁ±ªÂûãÊ≥®Ëß£
- ‰ΩøÁî®Ê≥õÂûãÁ±ªÂûãÊ≥®Ëß£ (List[str], Dict[str, Any])
- Â§çÊùÇÁ±ªÂûã‰ΩøÁî®PydanticÊ®°Âûã

```python
from typing import List, Dict, Optional
from pydantic import BaseModel

class MemoryItem(BaseModel):
    key: str
    value: str
    category: Optional[str] = None
    importance: int = 1

async def store_memory(item: MemoryItem) -> Dict[str, str]:
    """Â≠òÂÇ®ËÆ∞ÂøÜÈ°π"""
    pass
```

### ÂºÇÊ≠•ÁºñÁ®ã
- I/OÊìç‰ΩúÂøÖÈ°ª‰ΩøÁî®async/await
- ‰ΩøÁî®asyncio.gather()Âπ∂ÂèëÊâßË°å‰ªªÂä°
- Ê≠£Á°ÆÂ§ÑÁêÜÂºÇÊ≠•‰∏ä‰∏ãÊñáÁÆ°ÁêÜÂô®

```python
async def process_multiple_tools(tools: List[str]) -> List[Dict]:
    """Âπ∂ÂèëÂ§ÑÁêÜÂ§ö‰∏™Â∑•ÂÖ∑"""
    tasks = [process_tool(tool) for tool in tools]
    return await asyncio.gather(*tasks)
```

### ÈîôËØØÂ§ÑÁêÜ
- ‰ΩøÁî®Ëá™ÂÆö‰πâÂºÇÂ∏∏Á±ª
- ËÆ∞ÂΩïËØ¶ÁªÜÁöÑÈîôËØØÊó•Âøó
- Êèê‰æõÊúâÊÑè‰πâÁöÑÈîôËØØÊ∂àÊÅØ

```python
from core.exceptions import MCPError

class ToolNotFoundError(MCPError):
    """Â∑•ÂÖ∑Êú™ÊâæÂà∞ÂºÇÂ∏∏"""
    pass

async def call_tool(name: str) -> Dict:
    try:
        return await execute_tool(name)
    except ToolNotFoundError as e:
        logger.error(f"Tool {name} not found: {e}")
        raise MCPError(f"Â∑•ÂÖ∑ {name} ‰∏çÂ≠òÂú®")
```

## üõ†Ô∏è MCPÂºÄÂèëËßÑËåÉ

### ÊúçÂä°Âô®ÂºÄÂèë
```python
from mcp.server import Server
from mcp.server.models import InitializationOptions
import mcp.types as types

# ÂàõÂª∫ÊúçÂä°Âô®ÂÆû‰æã
server = Server("my-server")

@server.tool()
async def my_tool(
    param1: str,
    param2: Optional[int] = None
) -> str:
    """Â∑•ÂÖ∑ÊèèËø∞"""
    # ÂÆûÁé∞ÈÄªËæë
    return "result"

@server.prompt()
async def my_prompt(context: str) -> types.Prompt:
    """ÊèêÁ§∫ËØçÁîüÊàê"""
    return types.Prompt(
        name="my_prompt",
        description="ÊèêÁ§∫ËØçÊèèËø∞",
        messages=[
            types.PromptMessage(
                role="user",
                content=types.TextContent(type="text", text=context)
            )
        ]
    )
```

### ÂÆ¢Êà∑Á´ØÂºÄÂèë
```python
from mcp import ClientSession
from mcp.client.stdio import stdio_client

async def create_client_session():
    async with stdio_client() as (read, write):
        async with ClientSession(read, write) as session:
            await session.initialize()
            # ‰ΩøÁî®session
            tools = await session.list_tools()
            return tools
```

### Â∑•ÂÖ∑ÂºÄÂèë
```python
from tools.base import ToolBase
from pydantic import BaseModel, Field

class MyToolInput(BaseModel):
    query: str = Field(description="Êü•ËØ¢ÂèÇÊï∞")
    limit: int = Field(default=10, description="ÁªìÊûúÈôêÂà∂")

class MyTool(ToolBase):
    name = "my_tool"
    description = "Â∑•ÂÖ∑ÊèèËø∞"
    input_schema = MyToolInput
    
    async def execute(self, params: MyToolInput) -> Dict[str, Any]:
        """ÊâßË°åÂ∑•ÂÖ∑ÈÄªËæë"""
        return {"result": "success"}
```

## üìä Êï∞ÊçÆÂ∫ìËßÑËåÉ

### Ê®°ÂûãÂÆö‰πâ
```python
from sqlalchemy import Column, String, Integer, DateTime
from sqlalchemy.ext.declarative import declarative_base
from datetime import datetime

Base = declarative_base()

class MemoryModel(Base):
    __tablename__ = "memories"
    
    id = Column(Integer, primary_key=True)
    key = Column(String, unique=True, nullable=False)
    value = Column(String, nullable=False)
    category = Column(String, nullable=True)
    created_at = Column(DateTime, default=datetime.utcnow)
```

### ‰ªìÂÇ®Ê®°Âºè
```python
from abc import ABC, abstractmethod
from typing import List, Optional

class BaseRepository(ABC):
    @abstractmethod
    async def create(self, entity: BaseModel) -> BaseModel:
        pass
    
    @abstractmethod
    async def get_by_id(self, id: int) -> Optional[BaseModel]:
        pass
    
    @abstractmethod
    async def list(self, limit: int = 100) -> List[BaseModel]:
        pass
```

## üß™ ÊµãËØïËßÑËåÉ

### ÂçïÂÖÉÊµãËØï
```python
import pytest
from unittest.mock import AsyncMock, patch

@pytest.mark.asyncio
async def test_memory_storage():
    """ÊµãËØïËÆ∞ÂøÜÂ≠òÂÇ®ÂäüËÉΩ"""
    memory_store = MemoryStore()
    
    result = await memory_store.store("key", "value")
    
    assert result["status"] == "success"
    assert result["key"] == "key"
```

### ÈõÜÊàêÊµãËØï
```python
@pytest.mark.asyncio
async def test_mcp_server_integration():
    """ÊµãËØïMCPÊúçÂä°Âô®ÈõÜÊàê"""
    async with create_test_server() as server:
        client = create_test_client()
        
        tools = await client.list_tools()
        assert len(tools) > 0
```

## üìù ÊñáÊ°£ËßÑËåÉ

### ÂáΩÊï∞ÊñáÊ°£
```python
async def complex_function(
    param1: str,
    param2: Optional[Dict[str, Any]] = None
) -> List[Dict[str, str]]:
    """
    ÊâßË°åÂ§çÊùÇÊìç‰ΩúÁöÑÂáΩÊï∞
    
    Args:
        param1: ‰∏ªË¶ÅÂèÇÊï∞ËØ¥Êòé
        param2: ÂèØÈÄâÂèÇÊï∞ËØ¥ÊòéÔºåÈªòËÆ§‰∏∫None
        
    Returns:
        ÂåÖÂê´ÁªìÊûúÂ≠óÂÖ∏ÁöÑÂàóË°®
        
    Raises:
        ValueError: ÂΩìparam1‰∏∫Á©∫Êó∂
        MCPError: ÂΩìÊìç‰ΩúÂ§±Ë¥•Êó∂
        
    Example:
        >>> result = await complex_function("test")
        >>> print(result[0]["status"])
        "success"
    """
    pass
```

### READMEÊ®°Êùø
ÊØè‰∏™Ê®°ÂùóÈÉΩÂ∫îËØ•ÊúâREADME.mdÔºåÂåÖÂê´Ôºö
- ÂäüËÉΩÊ¶ÇËø∞
- ÂÆâË£ÖËØ¥Êòé
- ‰ΩøÁî®Á§∫‰æã
- APIÊñáÊ°£
- ÈÖçÁΩÆËØ¥Êòé

## üîí ÂÆâÂÖ®ËßÑËåÉ

### ËæìÂÖ•È™åËØÅ
- ÊâÄÊúâÂ§ñÈÉ®ËæìÂÖ•ÂøÖÈ°ªÈ™åËØÅ
- ‰ΩøÁî®PydanticÊ®°ÂûãÈ™åËØÅÊï∞ÊçÆ
- Èò≤ËåÉSQLÊ≥®ÂÖ•ÂíåXSSÊîªÂáª

### ËÆ§ËØÅÊéàÊùÉ
```python
from core.security import require_auth

@require_auth
async def protected_endpoint(user: User):
    """ÈúÄË¶ÅËÆ§ËØÅÁöÑÁ´ØÁÇπ"""
    pass
```

### ÊïèÊÑüÊï∞ÊçÆ
- ‰ΩøÁî®ÁéØÂ¢ÉÂèòÈáèÂ≠òÂÇ®ÊïèÊÑüÈÖçÁΩÆ
- ‰∏çÂú®Êó•Âøó‰∏≠ËÆ∞ÂΩïÊïèÊÑü‰ø°ÊÅØ
- ‰ΩøÁî®Âä†ÂØÜÂ≠òÂÇ®ÂØÜÁ†ÅÂíåÂØÜÈí•

## üöÄ ÊÄßËÉΩËßÑËåÉ

### ÁºìÂ≠òÁ≠ñÁï•
```python
from functools import lru_cache
from core.cache import redis_cache

@redis_cache(expire=3600)
async def expensive_operation(param: str) -> Dict:
    """ÊòÇË¥µÊìç‰ΩúÁöÑÁºìÂ≠ò"""
    pass
```

### Âπ∂ÂèëÊéßÂà∂
```python
import asyncio

# ÈôêÂà∂Âπ∂ÂèëÊï∞
semaphore = asyncio.Semaphore(10)

async def limited_operation():
    async with semaphore:
        # ÊâßË°åÊìç‰Ωú
        pass
```

## üì¶ ‰æùËµñÁÆ°ÁêÜ

### pyproject.tomlÈÖçÁΩÆ
```toml
[tool.poetry]
name = "mcp-service"
version = "0.1.0"
description = "MCPÁªºÂêàÊúçÂä°Âπ≥Âè∞"

[tool.poetry.dependencies]
python = "^3.11"
mcp = "^1.0.0"
fastapi = "^0.104.0"
pydantic = "^2.0.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.0.0"
pytest-asyncio = "^0.21.0"
black = "^23.0.0"
mypy = "^1.0.0"
```

## üîç ‰ª£Á†ÅË¥®Èáè

### È¢ÑÊèê‰∫§Èí©Â≠ê
- ‰ΩøÁî®blackÊ†ºÂºèÂåñ‰ª£Á†Å
- ‰ΩøÁî®mypyÊ£ÄÊü•Á±ªÂûã
- ‰ΩøÁî®pytestËøêË°åÊµãËØï
- ‰ΩøÁî®flake8Ê£ÄÊü•‰ª£Á†ÅÈ£éÊ†º

### ‰ª£Á†ÅÂÆ°Êü•Ê£ÄÊü•ÁÇπ
- [ ] ÊòØÂê¶ÈÅµÂæ™ÂºÇÊ≠•ÁºñÁ®ãËßÑËåÉ
- [ ] ÊòØÂê¶ÊúâÈÄÇÂΩìÁöÑÁ±ªÂûãÊ≥®Ëß£
- [ ] ÊòØÂê¶ÊúâÂÖÖÂàÜÁöÑÈîôËØØÂ§ÑÁêÜ
- [ ] ÊòØÂê¶ÊúâÂçïÂÖÉÊµãËØïË¶ÜÁõñ
- [ ] ÊòØÂê¶Á¨¶ÂêàMCPÂçèËÆÆËßÑËåÉ
- [ ] ÊòØÂê¶ÊúâÈÄÇÂΩìÁöÑÊñáÊ°£Ê≥®Èáä

## üéØ ÂºÄÂèëÂ∑•‰ΩúÊµÅ

1. **ÂàõÂª∫ÂäüËÉΩÂàÜÊîØ**: `git checkout -b feature/new-tool`
2. **ÁºñÂÜô‰ª£Á†Å**: ÈÅµÂæ™‰∏äËø∞ËßÑËåÉ
3. **ÁºñÂÜôÊµãËØï**: Á°Æ‰øùÊµãËØïË¶ÜÁõñÁéá > 80%
4. **ËøêË°åÊ£ÄÊü•**: `poetry run pytest && poetry run mypy`
5. **Êèê‰∫§‰ª£Á†Å**: ‰ΩøÁî®ËØ≠‰πâÂåñÊèê‰∫§Ê∂àÊÅØ
6. **ÂàõÂª∫PR**: ÂåÖÂê´ÂäüËÉΩÊèèËø∞ÂíåÊµãËØïÁªìÊûú
7. **‰ª£Á†ÅÂÆ°Êü•**: Ëá≥Â∞ë‰∏Ä‰∏™reviewerÊâπÂáÜ
8. **ÂêàÂπ∂‰ª£Á†Å**: ‰ΩøÁî®squash merge

ËÆ∞‰ΩèÔºöË¥®Èáè > ÈÄüÂ∫¶ÔºåÂÆâÂÖ® > ‰æøÂà©ÔºåÊñáÊ°£ > ‰ª£Á†Å