version: '3.8'

services:
  user-service-api:
    build:
      context: ../../../  # 从项目根目录构建
      dockerfile: tools/services/user_service/Dockerfile
    container_name: user-service-api
    ports:
      - "8000:8000"
    environment:
      # Auth0 配置
      - AUTH0_DOMAIN=dev-47zcqarlxizdkads.us.auth0.com
      - AUTH0_AUDIENCE=https://dev-47zcqarlxizdkads.us.auth0.com/api/v2/
      - AUTH0_CLIENT_ID=Vsm0s23JTKzDrq9bq0foKyYieOCyeoQJ
      - AUTH0_CLIENT_SECRET=kk6n0zkaavCzd5FuqpoTeWudnQBNQvhXneb-LI3TPWunhUkJNim9FEZeWXKRJd7m
      
      # Stripe 配置
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - STRIPE_PRO_PRICE_ID=price_1RbchvL7y127fTKemRuw8Elz
      - STRIPE_ENTERPRISE_PRICE_ID=price_1RbciEL7y127fTKexyDAX9JA
      
      # 数据库配置 (如果使用外部数据库)
      - DATABASE_URL=postgresql://user:password@db:5432/userservice
      
      # 应用配置
      - ENVIRONMENT=development
      - LOG_LEVEL=info
      - CORS_ORIGINS=http://localhost:3000,https://www.iapro.ai
      
    volumes:
      - ../../../:/app  # 挂载项目根目录用于开发
      - logs:/app/logs  # 日志目录
    networks:
      - user-service-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 可选：添加 PostgreSQL 数据库
  db:
    image: postgres:15-alpine
    container_name: user-service-db
    environment:
      - POSTGRES_DB=userservice
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql  # 初始化脚本
    ports:
      - "5432:5432"
    networks:
      - user-service-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d userservice"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 可选：添加 Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: user-service-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - user-service-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # 可选：添加 Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: user-service-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro  # SSL 证书目录
    depends_on:
      - user-service-api
    networks:
      - user-service-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  logs:
    driver: local

networks:
  user-service-network:
    driver: bridge 