{
  "test_time": "2025-06-29T03:44:41.126685",
  "separation_tests": [],
  "input_output_flow": [
    {
      "step": "Step 4 - SQL Generation",
      "test_number": 1,
      "error": "MetadataMatch.__init__() got an unexpected keyword argument 'confidence_score'",
      "success": false
    },
    {
      "step": "Step 4 - SQL Generation",
      "test_number": 2,
      "error": "MetadataMatch.__init__() got an unexpected keyword argument 'confidence_score'",
      "success": false
    },
    {
      "step": "Step 4 - SQL Generation",
      "test_number": 3,
      "error": "MetadataMatch.__init__() got an unexpected keyword argument 'confidence_score'",
      "success": false
    },
    {
      "step": "Step 5 - SQL Execution",
      "test_number": 1,
      "input": {
        "sql": "SELECT company_name, company_code FROM companies LIMIT 10;",
        "description": "Simple company listing"
      },
      "output": {
        "success": false,
        "row_count": 0,
        "execution_time_ms": 0.0,
        "column_names": [],
        "error_message": "All fallback strategies failed",
        "fallback_attempts_count": 3
      },
      "success": true
    },
    {
      "step": "Step 5 - SQL Execution",
      "test_number": 2,
      "input": {
        "sql": "SELECT c.company_name, COUNT(d.declaration_id) as count FROM companies c LEFT JOIN declarations d ON c.company_code = d.company_code GROUP BY c.company_name ORDER BY count DESC LIMIT 10;",
        "description": "Company declaration count aggregation"
      },
      "output": {
        "success": false,
        "row_count": 0,
        "execution_time_ms": 0.0,
        "column_names": [],
        "error_message": "All fallback strategies failed",
        "fallback_attempts_count": 3
      },
      "success": true
    },
    {
      "step": "Step 5 - SQL Execution",
      "test_number": 3,
      "input": {
        "sql": "SELECT * FROM declarations WHERE rmb_amount > 1000000 ORDER BY rmb_amount DESC LIMIT 20;",
        "description": "High-value declarations filter"
      },
      "output": {
        "success": false,
        "row_count": 0,
        "execution_time_ms": 0.0,
        "column_names": [],
        "error_message": "All fallback strategies failed",
        "fallback_attempts_count": 3
      },
      "success": true
    }
  ],
  "success": false,
  "summary": "\nSeparation Test Results:\n- Step 4 (SQL Generation) Tests: 3\n- Step 5 (SQL Execution) Tests: 3\n- Successful Tests: 3/6\n- Overall Success: False\n\nKey Findings:\n✓ Step 4 (LLMSQLGenerator) handles ONLY SQL generation from context\n✓ Step 5 (SQLExecutor) handles ONLY SQL execution with fallbacks\n✓ Clear input/output boundaries maintained\n✓ No cross-responsibility between components\n        "
}