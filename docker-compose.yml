version: '3.8'

services:
  # Load balancer for multiple MCP server instances
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - mcp-server-1
      - mcp-server-2
      - mcp-server-3
    restart: unless-stopped
    networks:
      - mcp-network

  # MCP Server Instance 1
  mcp-server-1:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    environment:
      - ENVIRONMENT=production
      - FASTAPI_PORT=3000
      - MCP_PORT=8000
      - FASTAPI_HOST=0.0.0.0
      - MCP_HOST=0.0.0.0
      - SERVICE_NAME=mcp-server-1
      - VERSION=1.0.0
    ports:
      - "3001:3000"
      - "8001:8000"
    volumes:
      - mcp-data-1:/app/data
      - mcp-logs-1:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - mcp-network

  # MCP Server Instance 2
  mcp-server-2:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    environment:
      - ENVIRONMENT=production
      - FASTAPI_PORT=3000
      - MCP_PORT=8000
      - FASTAPI_HOST=0.0.0.0
      - MCP_HOST=0.0.0.0
      - SERVICE_NAME=mcp-server-2
      - VERSION=1.0.0
    ports:
      - "3002:3000"
      - "8002:8000"
    volumes:
      - mcp-data-2:/app/data
      - mcp-logs-2:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - mcp-network

  # MCP Server Instance 3
  mcp-server-3:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    environment:
      - ENVIRONMENT=production
      - FASTAPI_PORT=3000
      - MCP_PORT=8000
      - FASTAPI_HOST=0.0.0.0
      - MCP_HOST=0.0.0.0
      - SERVICE_NAME=mcp-server-3
      - VERSION=1.0.0
    ports:
      - "3003:3000"
      - "8003:8000"
    volumes:
      - mcp-data-3:/app/data
      - mcp-logs-3:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - mcp-network

  # Redis for shared caching (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - mcp-network

  # Prometheus for metrics collection (optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - mcp-network

  # Grafana for monitoring dashboard (optional)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
    restart: unless-stopped
    networks:
      - mcp-network

volumes:
  mcp-data-1:
  mcp-data-2:
  mcp-data-3:
  mcp-logs-1:
  mcp-logs-2:
  mcp-logs-3:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  mcp-network:
    driver: bridge